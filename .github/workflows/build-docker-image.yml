name: Gradle build and docker package

on:
  workflow_call:
    inputs:
      acr-name:
        required: true
        type: string
    secrets:
      external-maven-repo-password:
        required: true
      acr-username:
        required: true
      acr-password:
        required: true

jobs:
  build:
    name: Gradle build and test.
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        cache: 'gradle'
    - name: Set version by tag
      run: echo "PACKAGE_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
      if: github.ref_type == 'tag'
    - name: Set image version by property
      run: echo "PACKAGE_VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')" >> $GITHUB_ENV
      if: github.ref_type != 'tag'
    - name: Set gradlew executalbe
      run: chmod +x gradlew
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: |
          build 
          -PexternalPassword=${{ secrets.external-maven-repo-password }}
          -Pversion=${{ env.PACKAGE_VERSION }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/libs/*.jar
    - name: Upload test report if build failed
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-reports
        path: '**/build/reports/**/*'
        retention-days: 5
  image-build:
    name: Build docker image and push
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Dowaload build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    - name: Display structure of downloaded files
      run: ls
    - name: Set image name
      run: echo "IMAGE=${{ inputs.acr-name }}.azurecr.io/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
    - name: Set image version by tag
      run: echo "IMAGE_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
      if: github.ref_type == 'tag'
    - name: Set image version by property
      run: echo "IMAGE_VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')" >> $GITHUB_ENV
      if: github.ref_type != 'tag'
    - name: Check Image Version
      id: check-image-version
      run: |
        if [[ ${{ env.IMAGE_VERSION }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "stable=true" >> $GITHUB_OUTPUT
        fi
    - name: Login azure container registry
      if: steps.check-image-version.outputs.stable == 'true'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ inputs.acr-name }}.azurecr.io
        username: ${{ secrets.acr-username }}
        password: ${{ secrets.acr-password }}
    - name: Build and push docker images
      if: steps.check-image-version.outputs.stable == 'true'
      run: |        
        docker build . -t $IMAGE:$IMAGE_VERSION -t $IMAGE:latest --no-cache --build-arg JAR_FILE=*.jar
        docker push  $IMAGE:$IMAGE_VERSION
        docker push  $IMAGE:latest
  publish-artifacts:
    runs-on: [self-hosted,gdc]
    needs: build
    steps:
      - name: Dowaload build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: "\\artifacts\\${{ github.repository }}\\${{ github.ref_name }}"
      - name: Delete artifacts
        uses: emersonsoftware/delete-artifact@v1
        with:
          name: build-artifacts
  cleanup-artifacts:
    runs-on: [self-hosted,gdc]
    needs: [image-build, publish-artifacts]
    steps:
      - name: Delete artifacts
        uses: emersonsoftware/delete-artifact@v1
        with:
          name: build-artifacts

    
    
    
